---
# Copyright (c) 2019 Cisco and/or its affiliates.
#
# This software is licensed to you under the terms of the Cisco Sample
# Code License, Version 1.1 (the "License"). You may obtain a copy of the
# License at
#
#               https://developer.cisco.com/docs/licenses
#
# All use of the material herein must be in accordance with the terms of
# the License. All rights not expressly granted by the License are
# reserved. Unless required by applicable law or agreed to separately in
# writing, software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.
- name: Add New Cluster
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: parse csv and make vars file
    command: "python parse_csv.py cluster.csv"

- name: Configure New Cluster and Apps
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    workers: 1

  tasks:
  - name: Load Password
    include_vars: vars/password.yml
  - name: Load Variables
    include_vars:
      file: cluster.csv.yml
      name: input



  - name: Get Token
    shell: "curl -i -k -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Accept: application/json' -d 'username={{username}}&password={{password}}' 'https://{{inventory_hostname}}/2/system/login'"
    register: token
  - name: Print TOKEN
    debug:
      msg:
        - "{{token.stdout_lines[6].split()[1]}}"

  - name: Create New Cluster from API
    uri:
        url: "https://{{inventory_hostname}}/2/clusters"
        method: POST
        body: {
          "is_harbor_enabled": false,
          "provider_client_config_uuid": "f610d6d4-5cd7-4a3c-937a-dbf69280dc5b",
          "name": "{{item.name}}",
          "kubernetes_version": "{{item.kubernetes_version}}",
          "ssh_key": "ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAHlSb9ZkXQL5/GI12258c+AIKVhDN1p1VYjvJR5oliqoR/gN/65D04BfsZWE8nk00AtJzvEVbjenwLeWuvIQsFs5AHa5uM4Fpmw3Ylpt1tB/GZHZ5Mg9sh1iLh5agSgNLWkAgCRvySmLO3fSq0IKarnQrMqId2pGUlNZr/YPP4irTvU6w== sandbox@CCP_SANDBOX_NISTP521_KEY",
          "description": "{{item.description}}",
          "datacenter": "{{item.datacenter}}",
          "cluster": "{{item.cluster}}",
          "resource_pool": "{{item.resource_pool}}",
          "networks": [
            "{{item.networks}}"
          ],
          "datastore": "{{item.datastore}}",
          "storage_class": "{{item.storage_class}}",
          "workers": "{{workers}}",
          "ssh_user": "{{item.ssh_user}}",
          "type": 1,
          "masters": 1,
          "deployer_type": "kubeadm",
          "ingress_vip_pool_id": "15ee6d0f-2709-4a7f-871e-71ce5c8568be",
          "load_balancer_ip_num": 4,
          "is_istio_enabled": false,
          "registries_root_ca": [
            ""
          ],
          "aws_iam_enabled": false,
          "aws_iam_role_arn": "",
          "worker_node_pool": {
            "vcpus": 2,
            "memory": 16384,
            "template": "ccp-tenant-image-1.12.3-ubuntu18-3.1.0"
          },
          "master_node_pool": {
            "vcpus": 2,
            "memory": 16384,
            "template": "ccp-tenant-image-1.12.3-ubuntu18-3.1.0"
          },
          "node_ip_pool_uuid": "15ee6d0f-2709-4a7f-871e-71ce5c8568be",
          "network_plugin": {
            "name": "calico",
            "status": "",
            "details": "{\"pod_cidr\":\"192.168.0.0/16\"}"
          },
          "deployer": {
            "proxy_cmd": "StrictHostKeyChecking no\nHost 15.29.3?.* !15.29.30.* !15.29.31.*\n ProxyCommand nc --proxy 10.193.231.10:8111 --proxy-type socks4 %h %p",
            "provider_type": "vsphere",
            "provider": {
              "vsphere_datacenter": "CCP",
              "vsphere_datastore": "CCPDatastore",
              "vsphere_client_config_uuid": "f610d6d4-5cd7-4a3c-937a-dbf69280dc5b",
              "vsphere_working_dir": "/CCP/vm"
            }
          }
        }
        body_format: json  
        headers:
          Content-Type: "application/json"
          x-auth-token: "{{token.stdout_lines[6].split()[1]}}"
        return_content: yes
        validate_certs: no
        status_code: 200, -1
        # And don't validate the server cert as it's self-signed for non-prod.
    register: response
    loop: "{{ input.raw_data }}"

  - name: pause
    pause:
      minutes: 5
